using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AiPRgrNeytron
{
    class Program
    {
        static double Angle(string angleStr)
        {
            string[] parts = angleStr.Split(new[] { '~', '\'', '"' });
            int degrees = int.Parse(parts[0]);
            int minutes = int.Parse(parts[1]);
            int seconds = int.Parse(parts[2]);

            double angle = degrees + minutes / 60.0 + seconds / 3600.0;
            return angle; // возвращаем стандартезированный угол в формате дроби.
        }

        static Tuple<double, double> FindAntipod(double alpha, double beta)
        {
            double normalizedAlpha = (alpha % 360 + 360) % 360; // нормализуем до угла [0, 360]
            double normalizedBeta = beta;

            // нормализуем бета до угла [-90, 90]
            if (normalizedBeta > 90 || normalizedBeta < -90)
            {
                normalizedBeta = (normalizedBeta + 180) % 360 - 180;
                if (normalizedBeta > 90)
                    normalizedBeta = 180 - normalizedBeta;
                else if (normalizedBeta < -90)
                    normalizedBeta = -180 - normalizedBeta;
            }

            double antipodalAlpha = (normalizedAlpha + 180) % 360; //точка противоположная по XoY
            double antipodalBeta = -normalizedBeta; //точка противоположная по WoZ
            Console.WriteLine($"{antipodalAlpha} - {antipodalBeta}");
            return Tuple.Create(antipodalAlpha, antipodalBeta);
        }

        static void Main(string[] args)
        {
            int N = int.Parse(Console.ReadLine());
            var points = new List<Tuple<int, double, double>>();
            for (int i = 0; i < N; i++)
            {
                string[] input = Console.ReadLine().Split(' ');
                int k = int.Parse(input[0]);
                double alpha = Angle(input[1]);
                double beta = Angle(input[2]);
                points.Add(Tuple.Create(k, alpha, beta));
            }
            var antipodPairs = new List<Tuple<int, int>>();
            for (int i = 0; i < N; i++)
            {
                var antipodal = FindAntipod(points[i].Item2, points[i].Item3);

                for (int j = i + 1; j < N; j++) // тк с предидущими проверенно.
                {
                    double currAlpha = (points[j].Item2 % 360 + 360) % 360;
                    double currBeta = points[j].Item3;

                    if (Math.Abs(currAlpha - antipodal.Item1) < 1e-9 &&
                        Math.Abs(currBeta - antipodal.Item2) < 1e-9) // если разница очень маленькая то
                    {
                        int p = Math.Min(points[i].Item1, points[j].Item1);
                        int q = Math.Max(points[i].Item1, points[j].Item1);
                        antipodPairs.Add(Tuple.Create(p, q));
                        break;
                    }
                }
            }
            antipodPairs.Sort((a, b) => a.Item1 == b.Item1 ? a.Item2.CompareTo(b.Item2) : a.Item1.CompareTo(b.Item1));
            Console.WriteLine(antipodPairs.Count);
            foreach (var pair in antipodPairs)
            {
                Console.WriteLine($"{pair.Item1}-{pair.Item2}");
            }
        }
    }
}