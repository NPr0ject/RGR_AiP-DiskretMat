using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AiPRgrPriamougolnic
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] dimensions = Console.ReadLine().Split();
            int N = int.Parse(dimensions[0]);
            int M = int.Parse(dimensions[1]);

            int K = int.Parse(Console.ReadLine());
            bool[,] isBlocked = new bool[M + 1, N + 1];

            for (int i = 0; i < K; i++)
            {
                string[] coords = Console.ReadLine().Split();
                int X = int.Parse(coords[0]);
                int Y = int.Parse(coords[1]);
                isBlocked[Y, X] = true;
            }

            int maxArea = 0;
            int[] height = new int[N + 1];

            for (int row = 1; row <= M; row++)
            {
                for (int col = 1; col <= N; col++)
                {
                    if (!isBlocked[row, col])
                        height[col]++;
                    else
                        height[col] = 0;
                }
                Stack<int> stack = new Stack<int>();
                for (int col = 1; col <= N + 1; col++)
                {
                    int currentHeight = (col <= N) ? height[col] : 0;
                    while (stack.Count > 0 && height[stack.Peek()] > currentHeight)
                    {
                        int h = height[stack.Pop()];
                        int w = (stack.Count == 0) ? col - 1 : col - stack.Peek() - 1;
                        maxArea = Math.Max(maxArea, h * w);
                    }
                    stack.Push(col);
                }
            }

            Console.WriteLine(maxArea);
        }
    }
}